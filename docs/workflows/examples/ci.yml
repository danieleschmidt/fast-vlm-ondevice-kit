# Example CI workflow for FastVLM On-Device Kit
# Copy this to .github/workflows/ci.yml

name: üß™ Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Quality checks
  quality:
    name: üîç Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          pip install -e ".[dev]"
          
      - name: Lint with ruff
        run: ruff check src tests
        
      - name: Format check with black  
        run: black --check src tests
        
      - name: Import sorting with isort
        run: isort --check-only src tests
        
      - name: Type checking with mypy
        run: mypy src

  # Security scanning
  security:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: pip install bandit[toml] safety
        
      - name: Run bandit security scan
        run: bandit -r src/ -f json -o bandit-report.json
        
      - name: Run safety check
        run: safety check --json --output safety-report.json
        
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Unit tests
  test-unit:
    name: üß™ Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install dependencies
        run: |
          pip install -e ".[dev]"
          
      - name: Run unit tests
        run: |
          pytest tests/unit/ -v \
            --cov=src/fast_vlm_ondevice \
            --cov-report=xml \
            --cov-report=term-missing \
            --junit-xml=junit-unit.xml
            
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unit-tests
          name: codecov-unit

  # Integration tests
  test-integration:
    name: üîó Integration Tests
    runs-on: ubuntu-latest
    needs: [quality, security]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          pip install -e ".[dev]"
          
      - name: Run integration tests
        run: |
          pytest tests/integration/ -v \
            --junit-xml=junit-integration.xml
            
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-integration
          path: junit-integration.xml

  # Performance benchmarks
  benchmark:
    name: ‚ö° Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          pip install -e ".[dev,benchmark]"
          
      - name: Run benchmarks
        run: |
          pytest tests/performance/ \
            --benchmark-only \
            --benchmark-json=benchmark-results.json
            
      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: benchmark-results.json

  # Build validation
  build:
    name: üèóÔ∏è Build Validation
    runs-on: ubuntu-latest
    needs: [test-unit]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install build dependencies
        run: |
          pip install build twine
          
      - name: Build package
        run: |
          python -m build
          
      - name: Check package
        run: |
          twine check dist/*
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-package
          path: dist/

  # iOS/Swift testing (macOS only)
  test-ios:
    name: üì± iOS Tests
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Select Xcode version
        run: sudo xcode-select -s /Applications/Xcode_15.0.app
        
      - name: Build Swift package
        run: |
          cd ios
          swift build
          
      - name: Run Swift tests
        run: |
          cd ios
          swift test

  # Documentation build
  docs:
    name: üìö Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          pip install -e ".[dev]"
          
      - name: Build documentation
        run: |
          cd docs
          make html
          
      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: docs/_build/html/

  # Final status check
  ci-success:
    name: ‚úÖ CI Success
    runs-on: ubuntu-latest
    needs: [quality, security, test-unit, test-integration, build, test-ios, docs]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.quality.result }}" == "success" && \
                "${{ needs.security.result }}" == "success" && \
                "${{ needs.test-unit.result }}" == "success" && \
                "${{ needs.test-integration.result }}" == "success" && \
                "${{ needs.build.result }}" == "success" && \
                "${{ needs.test-ios.result }}" == "success" && \
                "${{ needs.docs.result }}" == "success" ]]; then
            echo "‚úÖ All CI checks passed!"
          else
            echo "‚ùå Some CI checks failed"
            exit 1
          fi