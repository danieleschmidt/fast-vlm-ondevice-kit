# Ruff configuration for advanced Python linting
# Complement to existing flake8 setup

[lint]
# Enable additional rule categories for advanced projects
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # Pyflakes
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "SIM", # flake8-simplify
    "I",   # isort
    "N",   # pep8-naming
    "D",   # pydocstyle
    "S",   # flake8-bandit
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "C4",  # flake8-comprehensions
    "EM",  # flake8-errmsg
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "INT", # flake8-gettext
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # Pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "NPY", # NumPy-specific rules
    "PERF", # Perflint
    "RUF", # Ruff-specific rules
]

# Ignore rules that conflict with Black or are not suitable for ML projects
ignore = [
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "S101", # Use of assert (common in tests and ML)
    "B008", # Do not perform function calls in argument defaults
    "FBT001", # Boolean positional arg in function definition
    "FBT002", # Boolean default value in function definition
    "COM812", # Trailing comma missing (conflicts with Black)
    "D203", # 1 blank line required before class docstring (conflicts with D211)
    "D213", # Multi-line docstring summary should start at the second line
    "PD901", # pandas `df` variable name
    "S311", # Standard pseudo-random generators are not suitable for cryptographic purposes
    "PLR0913", # Too many arguments to function call
    "PLR2004", # Magic value used in comparison
]

# Exclude files
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    ".pytest_cache",
    ".mypy_cache",
    ".ruff_cache",
    "__pypackages__",
    "scripts/download_checkpoints.py", # May use external API patterns
]

# Line length to match Black
line-length = 88

# Target Python version
target-version = "py310"

[lint.per-file-ignores]
# Test files can use assertions and have different patterns
"tests/**/*.py" = ["S101", "PLR2004", "ANN", "D"]
# Scripts may have different patterns
"scripts/**/*.py" = ["T20", "S603", "S607"]
# Benchmarks may have performance-specific patterns
"benchmarks/**/*.py" = ["T20", "PLR0913", "S311"]

[lint.mccabe]
max-complexity = 12

[lint.pydocstyle]
convention = "google"

[format]
# Use double quotes for strings
quote-style = "double"
# Indent with 4 spaces
indent-style = "space"
# Keep Black compatibility
skip-string-normalization = false
line-ending = "auto"